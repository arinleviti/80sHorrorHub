// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model YouTubeQuery {
  id        String         @id @default(cuid()) //Nightmare on Elm Street 1984 trailer
  query     String         @unique
  videos    YouTubeVideo[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model YouTubeVideo {
  id        String       @id @default(cuid())
  youtubeId String // actual YouTube videoId
  title     String
  thumbnail String
  url       String
  query     YouTubeQuery @relation(fields: [queryId], references: [id]) //the relation field
  queryId   String //YouTubeVideo.queryId = YouTubeQuery.id
}

model EbayQuery {
  id        String     @id @default(cuid())
  query     String     @unique
  items     EbayItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EbayItem {
  id            String    @id @default(cuid())
  title         String
  priceValue    String
  priceCurrency String
  imageUrl      String
  itemUrl       String
  query         EbayQuery @relation(fields: [queryId], references: [id])
  queryId       String
}

model DiscogQuery {
  id        String       @id @default(cuid())
  query     String       @unique
  items     DiscogItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model DiscogItem {
  id      String      @id @default(cuid())
  title   String
  year    Int?
  format  Json
  thumb   String?
  uri     String
  query   DiscogQuery @relation(fields: [queryId], references: [id])
  queryId String
}

model Movie {
  id                 String   @id @default(cuid())
  tmdbId             Int      @unique
  title              String
  releaseDate        String?
  overview           String
  posterPath         String?
  imagekitPosterPath String?
  popularity         Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  castMembers   CastMember[]
  crewMembers   CrewMember[]
  hfSuggestions HFSuggestion?  @relation("SourceMovie") // This movie HAS a suggestion record
  suggestedIn   HFSuggestion[] @relation("SuggestedMovies") // Add this for the suggestions relation

  slug          String?        @unique
  aiDescription AiDescription?
  contributions Contribution[]
}

model Actor {
  id                  Int          @id @default(autoincrement())
  name                String       @unique
  profilePath         String?
  imagekitProfilePath String?
  actorNameSanitized  String       @unique
  castMembers         CastMember[]
}

model CastMember {
  id        Int    @id @default(autoincrement())
  character String
  movieId   String // must match Movie.id type
  actorId   Int
  movie     Movie  @relation(fields: [movieId], references: [id])
  actor     Actor  @relation(fields: [actorId], references: [id])
}

model CrewMember {
  id      String @id @default(cuid())
  name    String
  job     String
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String
}

model StreamingQuery {
  id          String            @id @default(cuid())
  title       String
  releaseYear Int
  country     String // e.g., "us", "uk"
  options     StreamingOption[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([title, releaseYear, country])
}

model StreamingOption {
  id          String  @id @default(cuid())
  type        String // subscription, rent, buy
  quality     String? // HD, SD
  link        String? // optional URL
  serviceName String? // e.g., Netflix, Prime Video

  query   StreamingQuery @relation(fields: [queryId], references: [id])
  queryId String
}

model EbayToken {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
}

model HFSuggestion {
  id          String   @id @default(cuid())
  movieId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movie       Movie    @relation("SourceMovie", fields: [movieId], references: [id]) // Add the relation name here
  suggestions Movie[]  @relation("SuggestedMovies") // <-- give it a relation name
}

enum ContributionStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum ContributionSection {
  SYNOPSIS
  FUN_FACTS
  PRODUCTION_CONTEXT
  RECEPTION
  OTHER
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  image         String?
  role          UserRole       @default(USER)
  contributions Contribution[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Contribution {
  id        String              @id @default(cuid())
  movie     Movie               @relation(fields: [movieId], references: [id])
  movieId   String
  user      User                @relation(fields: [userId], references: [id])
  userId    String
  section   ContributionSection
  title     String?
  body      String // main text content
  status    ContributionStatus  @default(PENDING)
  upvotes   Int                 @default(0)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([movieId])
  @@index([userId])
  @@index([status])
}

model AiDescription {
  id                String  @id @default(cuid())
  synopsis          String?
  funFacts          String?
  productionContext String?
  reception         String?

  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String @unique
}
